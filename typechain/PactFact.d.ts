/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PactFactInterface extends ethers.utils.Interface {
  functions: {
    "TIMEOUT()": FunctionFragment;
    "accountBalances(address)": FunctionFragment;
    "cancelPact(uint256)": FunctionFragment;
    "hashAnswer(bool,bytes32)": FunctionFragment;
    "pactCount()": FunctionFragment;
    "pacts(uint256)": FunctionFragment;
    "proposePact(address,uint256,uint256,tuple,tuple,tuple,tuple,string)": FunctionFragment;
    "sealPact(uint256)": FunctionFragment;
    "submitAnswer1(uint256,bool,bytes32)": FunctionFragment;
    "submitAnswer1Hash(uint256,bytes32)": FunctionFragment;
    "submitAnswer2(uint256,bool)": FunctionFragment;
    "timeOutPact(uint256)": FunctionFragment;
    "validateMatrix(uint256,uint256,tuple,tuple,tuple,tuple)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "TIMEOUT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPact",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashAnswer",
    values: [boolean, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pactCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "pacts", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "proposePact",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sealPact",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitAnswer1",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitAnswer1Hash",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitAnswer2",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "timeOutPact",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMatrix",
    values: [
      BigNumberish,
      BigNumberish,
      { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish }
    ]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(functionFragment: "TIMEOUT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelPact", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashAnswer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pactCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pacts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposePact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sealPact", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitAnswer1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAnswer1Hash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAnswer2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeOutPact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMatrix",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CancelPact(uint256,uint8)": EventFragment;
    "IncreaseAccountBalance(address,uint256)": EventFragment;
    "InvalidAnswer(uint256,bool,bytes32)": EventFragment;
    "ProposePact(tuple)": EventFragment;
    "ReceiveEther(address,uint256)": EventFragment;
    "ResolveValidPact(uint256,bool,bytes32,uint8)": EventFragment;
    "SealPact(uint256,uint8)": EventFragment;
    "SubmitAnswer1Hash(uint256,bytes32,uint8)": EventFragment;
    "SubmitAnswer2(uint256,bool,uint256,uint8)": EventFragment;
    "TimeoutPact(uint256,uint8)": EventFragment;
    "WithdrawEther(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelPact"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseAccountBalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InvalidAnswer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposePact"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiveEther"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolveValidPact"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SealPact"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitAnswer1Hash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitAnswer2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimeoutPact"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawEther"): EventFragment;
}

export class PactFact extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PactFactInterface;

  functions: {
    TIMEOUT(overrides?: CallOverrides): Promise<[BigNumber]>;

    accountBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelPact(
      pactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hashAnswer(
      answer: boolean,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pactCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    pacts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        BigNumber,
        boolean,
        string,
        number
      ] & {
        p1: string;
        p2: string;
        p1Deposit: BigNumber;
        p2Deposit: BigNumber;
        tags: string;
        answer1Hash: string;
        answer2: boolean;
        answer2Block: BigNumber;
        answer1: boolean;
        answer1Salt: string;
        state: number;
      }
    >;

    proposePact(
      p2: string,
      p1Deposit: BigNumberish,
      p2Deposit: BigNumberish,
      payoutYY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutYN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      tags: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sealPact(
      pactId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitAnswer1(
      pactId: BigNumberish,
      answer: boolean,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitAnswer1Hash(
      pactId: BigNumberish,
      answerHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitAnswer2(
      pactId: BigNumberish,
      answer: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeOutPact(
      pactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateMatrix(
      p1Deposit: BigNumberish,
      p2Deposit: BigNumberish,
      payoutYY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutYN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[void]>;

    withdraw(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

  accountBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelPact(
    pactId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hashAnswer(
    answer: boolean,
    salt: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  pactCount(overrides?: CallOverrides): Promise<BigNumber>;

  pacts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean,
      BigNumber,
      boolean,
      string,
      number
    ] & {
      p1: string;
      p2: string;
      p1Deposit: BigNumber;
      p2Deposit: BigNumber;
      tags: string;
      answer1Hash: string;
      answer2: boolean;
      answer2Block: BigNumber;
      answer1: boolean;
      answer1Salt: string;
      state: number;
    }
  >;

  proposePact(
    p2: string,
    p1Deposit: BigNumberish,
    p2Deposit: BigNumberish,
    payoutYY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
    payoutYN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
    payoutNY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
    payoutNN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
    tags: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sealPact(
    pactId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitAnswer1(
    pactId: BigNumberish,
    answer: boolean,
    salt: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitAnswer1Hash(
    pactId: BigNumberish,
    answerHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitAnswer2(
    pactId: BigNumberish,
    answer: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeOutPact(
    pactId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateMatrix(
    p1Deposit: BigNumberish,
    p2Deposit: BigNumberish,
    payoutYY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
    payoutYN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
    payoutNY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
    payoutNN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
    overrides?: CallOverrides
  ): Promise<void>;

  withdraw(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

    accountBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelPact(pactId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    hashAnswer(
      answer: boolean,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    pactCount(overrides?: CallOverrides): Promise<BigNumber>;

    pacts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        BigNumber,
        boolean,
        string,
        number
      ] & {
        p1: string;
        p2: string;
        p1Deposit: BigNumber;
        p2Deposit: BigNumber;
        tags: string;
        answer1Hash: string;
        answer2: boolean;
        answer2Block: BigNumber;
        answer1: boolean;
        answer1Salt: string;
        state: number;
      }
    >;

    proposePact(
      p2: string,
      p1Deposit: BigNumberish,
      p2Deposit: BigNumberish,
      payoutYY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutYN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      tags: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sealPact(pactId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    submitAnswer1(
      pactId: BigNumberish,
      answer: boolean,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitAnswer1Hash(
      pactId: BigNumberish,
      answerHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitAnswer2(
      pactId: BigNumberish,
      answer: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    timeOutPact(pactId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    validateMatrix(
      p1Deposit: BigNumberish,
      p2Deposit: BigNumberish,
      payoutYY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutYN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(to: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    CancelPact(
      pactId?: null,
      state?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { pactId: BigNumber; state: number }
    >;

    IncreaseAccountBalance(
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    InvalidAnswer(
      pactId?: null,
      answer?: null,
      salt?: null
    ): TypedEventFilter<
      [BigNumber, boolean, string],
      { pactId: BigNumber; answer: boolean; salt: string }
    >;

    ProposePact(
      pact?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          [
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            }
          ],
          string,
          string,
          boolean,
          BigNumber,
          boolean,
          string,
          number
        ] & {
          p1: string;
          p2: string;
          p1Deposit: BigNumber;
          p2Deposit: BigNumber;
          payoutMatrix: [
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            }
          ];
          tags: string;
          answer1Hash: string;
          answer2: boolean;
          answer2Block: BigNumber;
          answer1: boolean;
          answer1Salt: string;
          state: number;
        }
      ],
      {
        pact: [
          string,
          string,
          BigNumber,
          BigNumber,
          [
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            }
          ],
          string,
          string,
          boolean,
          BigNumber,
          boolean,
          string,
          number
        ] & {
          p1: string;
          p2: string;
          p1Deposit: BigNumber;
          p2Deposit: BigNumber;
          payoutMatrix: [
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            },
            [BigNumber, BigNumber, BigNumber] & {
              p1: BigNumber;
              p2: BigNumber;
              burn: BigNumber;
            }
          ];
          tags: string;
          answer1Hash: string;
          answer2: boolean;
          answer2Block: BigNumber;
          answer1: boolean;
          answer1Salt: string;
          state: number;
        };
      }
    >;

    ReceiveEther(
      from?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    ResolveValidPact(
      pactId?: null,
      answer?: null,
      salt?: null,
      state?: null
    ): TypedEventFilter<
      [BigNumber, boolean, string, number],
      { pactId: BigNumber; answer: boolean; salt: string; state: number }
    >;

    SealPact(
      pactId?: null,
      state?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { pactId: BigNumber; state: number }
    >;

    SubmitAnswer1Hash(
      pactId?: null,
      answerHash?: null,
      state?: null
    ): TypedEventFilter<
      [BigNumber, string, number],
      { pactId: BigNumber; answerHash: string; state: number }
    >;

    SubmitAnswer2(
      pactId?: null,
      answer?: null,
      block?: null,
      state?: null
    ): TypedEventFilter<
      [BigNumber, boolean, BigNumber, number],
      { pactId: BigNumber; answer: boolean; block: BigNumber; state: number }
    >;

    TimeoutPact(
      pactId?: null,
      state?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { pactId: BigNumber; state: number }
    >;

    WithdrawEther(
      to?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;
  };

  estimateGas: {
    TIMEOUT(overrides?: CallOverrides): Promise<BigNumber>;

    accountBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelPact(
      pactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hashAnswer(
      answer: boolean,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pactCount(overrides?: CallOverrides): Promise<BigNumber>;

    pacts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    proposePact(
      p2: string,
      p1Deposit: BigNumberish,
      p2Deposit: BigNumberish,
      payoutYY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutYN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      tags: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sealPact(
      pactId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitAnswer1(
      pactId: BigNumberish,
      answer: boolean,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitAnswer1Hash(
      pactId: BigNumberish,
      answerHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitAnswer2(
      pactId: BigNumberish,
      answer: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeOutPact(
      pactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateMatrix(
      p1Deposit: BigNumberish,
      p2Deposit: BigNumberish,
      payoutYY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutYN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TIMEOUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelPact(
      pactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hashAnswer(
      answer: boolean,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pactCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pacts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposePact(
      p2: string,
      p1Deposit: BigNumberish,
      p2Deposit: BigNumberish,
      payoutYY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutYN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      tags: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sealPact(
      pactId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitAnswer1(
      pactId: BigNumberish,
      answer: boolean,
      salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitAnswer1Hash(
      pactId: BigNumberish,
      answerHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitAnswer2(
      pactId: BigNumberish,
      answer: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeOutPact(
      pactId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateMatrix(
      p1Deposit: BigNumberish,
      p2Deposit: BigNumberish,
      payoutYY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutYN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNY: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      payoutNN: { p1: BigNumberish; p2: BigNumberish; burn: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
